http_client:
  name: Micronaut HTTP Client
  link: 'https://docs.micronaut.io/latest/guide/httpClient.html'
  dependency:
    - coordinates: io.micronaut:micronaut-http-client
      scope: implementation
  requires:
    - ersatz
  configuration:
    slack:
      url: https://hooks.slack.com/services
      app: someapp
      key: somekey
      secret: somesecret
  provides:
  - name: slackClient
    type: SlackClient
  files:
  - name: SlackClient
    path: $mainPackageRelativeDir/SlackClient.java
    description: Example HTTP client for Slack
  - name: SlackClientSpec
    path: $testPackageRelativeDir/SlackClientSpec.groovy
    description: Example HTTP client test using Ersatz
ag_ws:
  name: Micronaut AWS SDK API Gateway WebSockets
  link: 'https://agorapulse.github.io/micronaut-libraries/#_websockets_for_api_gateway'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-ag-ws:$micronautAwsSdkVersion
      scope: implementation
  configuration:
    aws:
      websocket:
        region: eu-west-1
        connections:
          url: https://abcefgh.execute-api.eu-west-1.amazonaws.com/test/@connections
cw:
  name: Micronaut AWS SDK CloudWatch
  link: 'https://agorapulse.github.io/micronaut-libraries/#_aws_sdk_for_micronaut'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-cloudwatch:$micronautAwsSdkVersion
      scope: implementation
  provides:
    - name: cloudwatch
      type: com.amazonaws.services.cloudwatch.AmazonCloudWatch
core:
  name: Micronaut AWS SDK Core
  link: 'https://agorapulse.github.io/micronaut-libraries/#_aws_sdk_for_micronaut'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-core:$micronautAwsSdkVersion
      scope: implementation
dynamodb:
  name: Micronaut AWS SDK DynamoDB
  link: 'https://agorapulse.github.io/micronaut-libraries/#_dynamodb'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-dynamodb:$micronautAwsSdkVersion
      scope: implementation
  provides:
    - name: dynamoDBEntityService
      type: DynamoDBEntityDBService
  files:
    - name: DynamoDBEntityDBService
      path: $mainPackageRelativeDir/DynamoDBEntityDBService.groovy
      description: Example declarative DynamoDB data service
    - name: DynamoDBEntity
      path: $mainPackageRelativeDir/DynamoDBEntity.groovy
      description: Example DynamoDB entity
  requires:
    - dru_dynamodb
kinesis:
  name: Micronaut AWS SDK Kinesis
  link: 'https://agorapulse.github.io/micronaut-libraries/#_kinesis'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-kinesis:$micronautAwsSdkVersion
      scope: implementation
  configuration:
    aws:
      kinesis:
        region: eu-west-1
        stream: MyStream
  provides:
    - name: kinesisClient
      type: SimpleKinesisClient
  files:
    - name: SimpleKinesisClient
      path: $mainPackageRelativeDir/SimpleKinesisClient.java
      description: Example declarative Kinesis client
s3:
  name: Micronaut AWS SDK S3
  link: 'https://agorapulse.github.io/micronaut-libraries/#_simple_storage_service_s3'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-s3:$micronautAwsSdkVersion
      scope: implementation
  configuration:
    aws:
      s3:
        region: eu-west-1
        bucket: MyBucket
  provides:
    - name: s3
      type: com.agorapulse.micronaut.aws.s3.SimpleStorageService
ses:
  name: Micronaut AWS SDK SES
  link: 'https://agorapulse.github.io/micronaut-libraries/#_simple_email_service_ses'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-ses:$micronautAwsSdkVersion
      scope: implementation
  provides:
    - name: ses
      type: com.agorapulse.micronaut.aws.ses.SimpleEmailService
sns:
  name: Micronaut AWS SDK SNS
  link: 'https://agorapulse.github.io/micronaut-libraries/#_simple_notification_service_sns'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-sns:$micronautAwsSdkVersion
      scope: implementation
  configuration:
    aws:
      sns:
        region: eu-west-1
        topic: MyTopic
        ios:
          arn: 'arn:aws:sns:eu-west-1:123456789:app/APNS/my-ios-app'
        android:
          arn: 'arn:aws:sns:eu-west-1:123456789:app/GCM/my-android-app'
        amazon:
          arn: 'arn:aws:sns:eu-west-1:123456789:app/ADM/my-amazon-app'
  provides:
    - name: notificationClient
      type: SimpleNotificationClient
  files:
    - name: SimpleNotificationClient
      path: $mainPackageRelativeDir/SimpleNotificationClient.java
      description: Example declarative SNS client
sqs:
  name: Micronaut AWS SDK SQS
  link: 'https://agorapulse.github.io/micronaut-libraries/#_simple_queue_service_sqs'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-sqs:$micronautAwsSdkVersion
      scope: implementation
  configuration:
    aws:
      sqs:
        region: eu-west-1
        queue: MyQueue
        queueNamePrefix: 'vlad_'
        autoCreateQueue: true
        cache: false
        fifo: true
        delaySeconds: 0
        messageRetentionPeriod: 345600
        maximumMessageSize: 262144
        visibilityTimeout: 30
  provides:
    - name: queueClient
      type: SimpleQueueClient
  files:
    - name: SimpleQueueClient
      path: $mainPackageRelativeDir/SimpleQueueClient.java
      description: Example declarative SQS client
sts:
  name: Micronaut AWS SDK STS
  link: 'https://agorapulse.github.io/micronaut-libraries/#_security_token_service_sts'
  dependency:
    - coordinates: com.agorapulse:micronaut-aws-sdk-sts:$micronautAwsSdkVersion
      scope: implementation
  provides:
    - name: sts
      type: com.agorapulse.micronaut.aws.sts.SecurityTokenService
data_jdbc:
  name: Micronaut Data JDBC
  link: 'https://micronaut-projects.github.io/micronaut-data/latest/guide/#sql'
  dependency:
    - coordinates: io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion
      scope: implementation
    - coordinates: com.h2database:h2
      scope: runtimeOnly
    - coordinates: io.micronaut.configuration:micronaut-jdbc-hikari
      scope: runtimeOnly
    - coordinates: jakarta.persistence:jakarta.persistence-api:2.2.2
      scope: compileOnly
  configuration:
    datasources:
      default:
        url: jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
        driverClassName: org.h2.Driver
        username: sa
        password: ''
        schema-generate: CREATE_DROP
        dialect: H2
gorm_hibernate:
  name: GORM for Hibernate
  link: 'https://micronaut-projects.github.io/micronaut-groovy/latest/guide/#gorm'
  dependency:
    - coordinates: io.micronaut.configuration:micronaut-hibernate-gorm
      scope: implementation
    - coordinates: com.h2database:h2
      scope: runtimeOnly
    - coordinates: org.apache.tomcat:tomcat-jdbc
      scope: runtimeOnly
  configuration:
    dataSource:
      pooled: true
      dbCreate: create-drop
      url: jdbc:h2:mem:devDb
      driverClassName: org.h2.Driver
      username: sa
      password:
    hibernate:
      cache:
        queries: false
        use_second_level_cache: true
        use_query_cache: false
        region.factory_class: org.hibernate.cache.ehcache.EhCacheRegionFactory
fb:
  name: Facebook SDK for Micronaut
  link: 'https://github.com/agorapulse/micronaut-facebook-sdk#micronaut-facebook-sdk'
  dependency:
    - coordinates: com.agorapulse:micronaut-facebook-sdk:$micronautFacebookSdkVersion
      scope: implementation
  configuration:
    faceboook:
      sdk:
        app:
          # required
          id: 1234567890
          secret: t0ps€cr€tHaSh
          # optional
          permissions:
            - email
            - user_photos
          version: v5.0
  provides:
    - name: fb
      type: com.agorapulse.micronaut.facebooksdk.FacebookApplication
remember:
  name: Agorapulse Remember
  link: 'https://github.com/agorapulse/remember#remember'
  dependency:
    - coordinates: com.agorapulse:remember:$rememberVersion
      scope: compileOnly
snitch:
  name: Micronaut Snitch
  link: 'https://github.com/agorapulse/micronaut-snitch#micronaut-snitch'
  dependency:
    - coordinates: com.agorapulse:micronaut-snitch:$micronautSnitchVersion
      scope: implementation
  configuration:
    snitches:
      id: mydmsid
# testing
fixt:
  name: Fixt (Test Fixure Loading Helper)
  link: 'https://agorapulse.github.io/testing-libraries/#_fixt'
  dependency:
    - coordinates: com.agorapulse.testing:fixt:$fixtVersion
      scope: testImplementation
  files:
  - name: FixtBasedSpec
    path: $testPackageRelativeDir/FixtBasedSpec.groovy
    description: Example test with fixtures
  - name: hello.txt
    path: $testPackageResourcesRelativeDir/FixtBasedSpec/hello.txt
    description: Example fixture file
gru_http:
  name: Gru Tests for HTTP
  link: 'https://agorapulse.github.io/gru/#_http'
  dependency:
    - coordinates: com.agorapulse:gru-http:$gruVersion
      scope: testImplementation
gru_ag:
  name: Gru Tests for API Gateway
  link: 'https://agorapulse.github.io/gru/#_aws_api_gateway'
  dependency:
    - coordinates: com.agorapulse:gru-api-gateway:$gruVersion
      scope: testImplementation
ersatz:
  name: Ersatz Mock Server
  link: 'http://stehno.com/ersatz/guide/'
  dependency:
    - coordinates: com.stehno.ersatz:ersatz:1.9.0
      scope: testImplementation
    - coordinates: io.undertow:undertow-core:2.0.13.Final
      scope: testImplementation
dru_dynamodb:
  name: Dru Tests for DynamoDB
  link: 'https://agorapulse.github.io/dru/#_dynamodb'
  dependency:
    - coordinates: com.agorapulse:dru-client-dynamodb:$druVersion
      scope: testImplementation
    - coordinates: com.agorapulse:dru-parser-json:$druVersion
      scope: testImplementation
  files:
    - name: DynamoDBEntitySpec
      path: $testPackageRelativeDir/DynamoDBEntitySpec.groovy
      description: Example test with Dru DynamoDB client
    - name: enities.json
      path: $testPackageResourcesRelativeDir/DynamoDBEntitySpec/entities.json
      description: Example JSON entities fixture file
dru_gorm:
  name: Dru Tests for GORM
  link: 'https://agorapulse.github.io/dru/#_gorm'
  dependency:
    - coordinates: com.agorapulse:dru-client-gorm:$druVersion
      scope: testImplementation
    - coordinates: com.agorapulse:dru-parser-json:$druVersion
      scope: testImplementation
tc_localstack:
  name: Testcontainers for Localstack (AWS)
  link: 'https://medium.com/agorapulse-stories/how-to-unit-test-aws-services-with-localstack-and-testcontainers-1d39fe5dc6c2'
  dependency:
    - coordinates: org.testcontainers:spock:$testcontainersVersion
      scope: testImplementation
    - coordinates: org.testcontainers:localstack:$testcontainersVersion
      scope: testImplementation
  files:
    - name: AwsSpec
      path: $testPackageRelativeDir/AwsSpec.groovy
      description: Example mock AWS interactions test using Localstack
tc_postgresql:
  name: Testcontainers for PostgreSQL
  link: 'https://www.testcontainers.org/modules/databases/postgres/'
  dependency:
    - coordinates: org.postgresql:postgresql:42.2.9
      scope: implementation
    - coordinates: org.testcontainers:spock:$testcontainersVersion
      scope: testImplementation
    - coordinates: org.testcontainers:postgresql:$testcontainersVersion
      scope: testImplementation
  files:
    - name: PostgreSQLSpec
      path: $testPackageRelativeDir/PostgreSQLSpec.groovy
      description: Example test using real PostgreSQL server running inside Docker
tc_mysql:
  name: Testcontainers for MySQL
  link: 'https://www.testcontainers.org/modules/databases/mysql/'
  dependency:
    - coordinates: mysql:mysql-connector-java:8.0.25
      scope: implementation
    - coordinates: org.testcontainers:spock:$testcontainersVersion
      scope: testImplementation
    - coordinates: org.testcontainers:mysql:$testcontainersVersion
      scope: testImplementation
  files:
    - name: MySQLSpec
      path: $testPackageRelativeDir/MySQLSpec.groovy
      description: Example test using real MySQL server running inside Docker
